name: Firebase App Distribution

on:
  push:
    tags:
      - 'dev-*'  # For Firebase distribution
      - 'v*'     # For Play Store distribution

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  BASE_URL: ${{ secrets.BASE_URL }}
  API_KEY: ${{ secrets.API_KEY }}
  NETWORK_LOGGER: ${{ secrets.NETWORK_LOGGER }}
  USE_MOCK_DATA: ${{ secrets.USE_MOCK_DATA }}
  FORCE_BLOCK_ADS: ${{ secrets.FORCE_BLOCK_ADS }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate version format
        run: |
          if [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PLAY_STORE=true" >> $GITHUB_ENV
            echo "::set-output name=is_play_store::true"
          elif [[ ${{ github.ref_name }} =~ ^dev-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PLAY_STORE=false" >> $GITHUB_ENV
            echo "::set-output name=is_play_store::false"
          else
            echo "Error: Tag must follow format vX.Y.Z (for Play Store) or dev-X.Y.Z (for Firebase)"
            exit 1
          fi

  build-android:
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        id: flutter-setup
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version-file: pubspec.yaml
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          pub-cache-key: 'flutter-pub:os:-:channel:-:version:-:arch:-:hash:'
      
      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "NETWORK_LOGGER=${{ secrets.NETWORK_LOGGER }}" >> .env
          echo "USE_MOCK_DATA=${{ secrets.USE_MOCK_DATA }}" >> .env
          echo "FORCE_BLOCK_ADS=${{ secrets.FORCE_BLOCK_ADS }}" >> .env
      
      - name: Install dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > key.jks

      - name: Setup signing configuration
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Create key.properties file
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEYSTORE_ALIAS }}" >> android/key.properties
          echo "storeFile=../../key.jks" >> android/key.properties
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate humanized release notes with Groq
        id: ai_release_notes
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          COMMITS=$(git log --pretty=format:"- %s" -n 5)
          PROMPT="You are ReleaseNotesGPT, an expert at writing clear, friendly, and concise app release notes for a VPN app. Your task is to take the following list of changes and rewrite them as user-facing release notes for the Play Store or App Store.\n\nGuidelines:\n- Only output the release notes themselves. Do not include any introductions, explanations, or closing statements.\n- Write in a friendly, approachable, and non-technical tone.\n- Focus on the benefits and improvements for the user.\n- Use bullet points if there are multiple items.\n- Do not mention that you are an AI or assistant.\n- Do not include any meta-commentary or instructions.\n- Only output the release notes, nothing else.\n\nHere are the changes:\n$COMMITS"
          echo "PROMPT being sent to AI:"
          echo "$PROMPT"
          RESPONSE=$(curl -s https://api.groq.com/openai/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $GROQ_API_KEY" \
            -d '{
              "model": "llama3-70b-8192",
              "messages": [
                {"role": "system", "content": "You are a helpful assistant that writes friendly, non-technical app release notes."},
                {"role": "user", "content": "'"$PROMPT"'"}
              ],
              "max_tokens": 300
            }')
          AI_NOTES=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          if [ -z "$AI_NOTES" ] || [ "$AI_NOTES" = "null" ]; then
            echo "AI response was null or empty. Full response: $RESPONSE"
            AI_NOTES="$COMMITS"
          fi
          echo "AI_RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$AI_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Write AI release notes to Play Store file
        run: |
          mkdir -p distribution/whatsnew
          cat <<EOF > distribution/whatsnew/whatsnew-en-US
          ${{ env.AI_RELEASE_NOTES }}
          EOF

      - name: Build Android APK
        if: startsWith(github.ref, 'refs/tags/dev-')
        run: |
          flutter build apk --debug
          if [ $? -ne 0 ]; then
            echo "Build failed, showing stacktrace..."
            cd android
            ./gradlew assembleDebug --stacktrace --info
            exit 1
          fi
      
      - name: Build Android App Bundle
        if: startsWith(github.ref, 'refs/tags/v')
        run: flutter build appbundle --release
      
      - name: Firebase App Distribution - Android
        if: startsWith(github.ref, 'refs/tags/dev-')
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          groups: qa-testers
          file: build/app/outputs/flutter-apk/app-debug.apk
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          releaseNotes: ${{ env.AI_RELEASE_NOTES }}
      
      - name: Upload to Google Play
        if: startsWith(github.ref, 'refs/tags/v')
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          packageName: com.gamavpn.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: alpha
          whatsNewDirectory: distribution/whatsnew

      - name: Send email to testers
        if: startsWith(github.ref, 'refs/tags/v')
        uses: dawidd6/action-send-mail@v6
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "New App Release Available for Testing"
          body: |
            Hi Testers,

            A new version of Gama VPN (version: ${{ github.ref_name }}) is available for testing on the Play Store.
            Please check the Play Store testing link.
            https://play.google.com/apps/testing/com.gamavpn.app

            Release notes:
            ${{ env.AI_RELEASE_NOTES }}

            Best regards,
            Your Handsome Developer :3
          to: ${{ secrets.MAIL_RECIPIENTS }}
          from: "Gama VPN <noreply@gama-vpn.com>"