name: Firebase App Distribution

on:
  push:
    tags:
      - 'dev-*'  # For Firebase distribution
      - 'v*'     # For Play Store distribution

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  BASE_URL: ${{ secrets.BASE_URL }}
  API_KEY: ${{ secrets.API_KEY }}
  NETWORK_LOGGER: ${{ secrets.NETWORK_LOGGER }}
  USE_MOCK_DATA: ${{ secrets.USE_MOCK_DATA }}
  FORCE_BLOCK_ADS: ${{ secrets.FORCE_BLOCK_ADS }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate version format
        run: |
          if [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PLAY_STORE=true" >> $GITHUB_ENV
            echo "::set-output name=is_play_store::true"
          elif [[ ${{ github.ref_name }} =~ ^dev-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PLAY_STORE=false" >> $GITHUB_ENV
            echo "::set-output name=is_play_store::false"
          else
            echo "Error: Tag must follow format vX.Y.Z (for Play Store) or dev-X.Y.Z (for Firebase)"
            exit 1
          fi

  build-android:
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        id: flutter-setup
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version-file: pubspec.yaml
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          pub-cache-key: 'flutter-pub:os:-:channel:-:version:-:arch:-:hash:'
      
      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "NETWORK_LOGGER=${{ secrets.NETWORK_LOGGER }}" >> .env
          echo "USE_MOCK_DATA=${{ secrets.USE_MOCK_DATA }}" >> .env
          echo "FORCE_BLOCK_ADS=${{ secrets.FORCE_BLOCK_ADS }}" >> .env
      
      - name: Install dependencies
        run: flutter pub get

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > key.jks

      - name: Setup signing configuration
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Create key.properties file
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEYSTORE_ALIAS }}" >> android/key.properties
          echo "storeFile=../../key.jks" >> android/key.properties
      
      - name: Generate release notes
        id: release_notes
        run: |
          git fetch --prune --unshallow || true
          COMMITS=$(git log --pretty=format:"- %s" -n 5)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "Release ${{ github.ref_name }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "Recent changes:" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Build Android APK
        if: startsWith(github.ref, 'refs/tags/dev-')
        run: |
          flutter build apk --debug
          if [ $? -ne 0 ]; then
            echo "Build failed, showing stacktrace..."
            cd android
            ./gradlew assembleDebug --stacktrace --info
            exit 1
          fi
      
      - name: Build Android App Bundle
        if: startsWith(github.ref, 'refs/tags/v')
        run: flutter build appbundle --release
      
      - name: Firebase App Distribution - Android
        if: startsWith(github.ref, 'refs/tags/dev-')
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          groups: qa-testers
          file: build/app/outputs/flutter-apk/app-debug.apk
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          releaseNotes: ${{ env.RELEASE_NOTES }}
      
      - name: Upload to Google Play
        if: startsWith(github.ref, 'refs/tags/v')
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          packageName: com.gamavpn.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: alpha