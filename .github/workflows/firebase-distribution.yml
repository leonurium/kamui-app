name: Firebase App Distribution

on:
  push:
    tags:
      - 'v*'

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  BASE_URL: ${{ secrets.BASE_URL }}
  API_KEY: ${{ secrets.API_KEY }}
  NETWORK_LOGGER: false

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate version format
        run: |
          if [[ ! ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must follow semantic versioning format (vX.Y.Z)"
            exit 1
          fi

  build-android:
    needs: validate-version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        id: flutter-setup
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version-file: pubspec.yaml
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          pub-cache-key: 'flutter-pub:os:-:channel:-:version:-:arch:-:hash:'
      
      - name: Print Flutter Setup Outputs
        run: |
          echo "=== Flutter Setup Details ==="
          echo "Cache Path: ${{ steps.flutter-setup.outputs.CACHE-PATH }}"
          echo "Cache Key: ${{ steps.flutter-setup.outputs.CACHE-KEY }}"
          echo "Channel: ${{ steps.flutter-setup.outputs.CHANNEL }}"
          echo "Version: ${{ steps.flutter-setup.outputs.VERSION }}"
          echo "Architecture: ${{ steps.flutter-setup.outputs.ARCHITECTURE }}"
          echo "Pub Cache Path: ${{ steps.flutter-setup.outputs.PUB-CACHE-PATH }}"
          echo "Pub Cache Key: ${{ steps.flutter-setup.outputs.PUB-CACHE-KEY }}"
          echo "=== Flutter Version ==="
          flutter --version
          echo "=== Flutter Doctor ==="
          flutter doctor -v
      
      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "NETWORK_LOGGER=false" >> .env
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate release notes
        id: release_notes
        run: |
          git fetch --prune --unshallow || true
          COMMITS=$(git log --pretty=format:"- %s" -n 5)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "Release ${{ github.ref_name }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "Recent changes:" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Build Android APK
        run: |
          flutter build apk
          if [ $? -ne 0 ]; then
            echo "Build failed, showing stacktrace..."
            cd android
            ./gradlew assembleDebug --stacktrace --info
            exit 1
          fi
          flutter build appbundle
      
      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk
      
      - name: Firebase App Distribution - Android
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          groups: qa-testers
          file: build/app/outputs/flutter-apk/app-debug.apk
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          releaseNotes: ${{ env.RELEASE_NOTES }}

  build-ios:
    needs: validate-version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        id: flutter-setup
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version-file: pubspec.yaml
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          pub-cache-key: 'flutter-pub:os:-:channel:-:version:-:arch:-:hash:'
      
      - name: Print Flutter Setup Outputs
        run: |
          echo "=== Flutter Setup Details ==="
          echo "Cache Path: ${{ steps.flutter-setup.outputs.CACHE-PATH }}"
          echo "Cache Key: ${{ steps.flutter-setup.outputs.CACHE-KEY }}"
          echo "Channel: ${{ steps.flutter-setup.outputs.CHANNEL }}"
          echo "Version: ${{ steps.flutter-setup.outputs.VERSION }}"
          echo "Architecture: ${{ steps.flutter-setup.outputs.ARCHITECTURE }}"
          echo "Pub Cache Path: ${{ steps.flutter-setup.outputs.PUB-CACHE-PATH }}"
          echo "Pub Cache Key: ${{ steps.flutter-setup.outputs.PUB-CACHE-KEY }}"
          echo "=== Flutter Version ==="
          flutter --version
          echo "=== Flutter Doctor ==="
          flutter doctor -v
      
      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "NETWORK_LOGGER=false" >> .env
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate release notes
        id: release_notes
        run: |
          git fetch --prune --unshallow || true
          COMMITS=$(git log --pretty=format:"- %s" -n 5)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "Release ${{ github.ref_name }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "Recent changes:" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Setup iOS build environment
        run: |
          cd ios
          pod repo update
          pod install --repo-update
          cd ..
      
      - name: Build iOS IPA
        run: |
          flutter build ios --release --no-codesign
          if [ $? -ne 0 ]; then
            echo "Build failed, showing stacktrace..."
            cd ios
            xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Debug -sdk iphoneos -verbose
            exit 1
          fi
      
      - name: Debug Build Output
        run: |
          echo "=== Debugging Build Output ==="
          echo "Current directory: $(pwd)"
          echo "=== Contents of build directory ==="
          ls build/
          echo "=== Contents of build/ios directory ==="
          ls build/ios/
          echo "=== Contents of build/ios/ipa directory ==="
          ls build/ios/ipa
      
      - name: Verify IPA Exists
        run: |
          # First try the standard location
          IPA_PATH=$(find build/ios/archive -name "*.ipa" | head -n 1)
          
          # If not found, try alternative locations
          if [ -z "$IPA_PATH" ]; then
            echo "IPA not found in standard location, searching alternatives..."
            IPA_PATH=$(find build/ios -name "*.ipa" | head -n 1)
          fi
          
          if [ -z "$IPA_PATH" ]; then
            echo "Error: IPA file not found in any standard locations"
            echo "Searching for IPA files in all locations..."
            find . -name "*.ipa" -type f
            exit 1
          fi
          
          echo "Found IPA at: $IPA_PATH"
          echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV
      
      - name: Upload iOS IPA
        uses: actions/upload-artifact@v4
        with:
          name: debug-ipa
          path: ${{ env.IPA_PATH }}
      
      - name: Firebase App Distribution - iOS
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          groups: qa-testers
          file: ${{ env.IPA_PATH }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          releaseNotes: ${{ env.RELEASE_NOTES }} 